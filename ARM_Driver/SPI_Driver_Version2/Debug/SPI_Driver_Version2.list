
SPI_Driver_Version2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000728  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000858  08000858  00010858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000868  08000868  00010870  2**0
                  CONTENTS
  4 .ARM          00000000  08000868  08000868  00010870  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000868  08000870  00010870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000868  08000868  00010868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800086c  0800086c  0001086c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000000  08000870  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000870  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010870  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000187a  00000000  00000000  00010899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000781  00000000  00000000  00012113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000320  00000000  00000000  00012898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002a8  00000000  00000000  00012bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000ae4  00000000  00000000  00012e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001493  00000000  00000000  00013944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007219  00000000  00000000  00014dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001bff0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a5c  00000000  00000000  0001c040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000840 	.word	0x08000840

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000840 	.word	0x08000840

08000170 <RCC_voidInitSysClock>:
#include "../00-RCC/RCC_private.h"
#include "../00-RCC/RCC_register.h"


void RCC_voidInitSysClock(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	/*Turn ON HSI with no trimming*/
	RCC->CR = 0x00000081;

#elif SYSTEM_CLK == SYS_CLK_HSE_CRYSTAL
	/*Selecting HSE as system clock without choosing prescaler*/
	RCC->CFGR = 1;
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <RCC_voidInitSysClock+0x24>)
 8000176:	2201      	movs	r2, #1
 8000178:	605a      	str	r2, [r3, #4]

	/*Selecting HSE with no bypass and trimming*/
	RCC->CR = 0x00010080;
 800017a:	4b06      	ldr	r3, [pc, #24]	; (8000194 <RCC_voidInitSysClock+0x24>)
 800017c:	4a06      	ldr	r2, [pc, #24]	; (8000198 <RCC_voidInitSysClock+0x28>)
 800017e:	601a      	str	r2, [r3, #0]

	/*Selecting Clock security system*/
#if RCC_CSS_ENABLE == ENABLE
	SET_BIT(RCC->CR,RCC_CR_CSSON);
#elif RCC_CSS_ENABLE == DISABLE
	CLR_BIT(RCC->CR,RCC_CR_CSSON);
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <RCC_voidInitSysClock+0x24>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <RCC_voidInitSysClock+0x24>)
 8000186:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800018a:	6013      	str	r3, [r2, #0]
#endif

}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000
 8000198:	00010080 	.word	0x00010080

0800019c <RCC_voidEnableClock>:


u8 RCC_voidEnableClock(u8 Copy_u8PeripheralID,u8 Copy_u8BusId)
{
 800019c:	b480      	push	{r7}
 800019e:	b085      	sub	sp, #20
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	460a      	mov	r2, r1
 80001a6:	71fb      	strb	r3, [r7, #7]
 80001a8:	4613      	mov	r3, r2
 80001aa:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8ErrorState = OK;
 80001ac:	2301      	movs	r3, #1
 80001ae:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8PeripheralID <= 31)
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	2b1f      	cmp	r3, #31
 80001b4:	d82a      	bhi.n	800020c <RCC_voidEnableClock+0x70>
	{
		switch (Copy_u8BusId)
 80001b6:	79bb      	ldrb	r3, [r7, #6]
 80001b8:	2b02      	cmp	r3, #2
 80001ba:	d01a      	beq.n	80001f2 <RCC_voidEnableClock+0x56>
 80001bc:	2b02      	cmp	r3, #2
 80001be:	dc22      	bgt.n	8000206 <RCC_voidEnableClock+0x6a>
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d002      	beq.n	80001ca <RCC_voidEnableClock+0x2e>
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d00a      	beq.n	80001de <RCC_voidEnableClock+0x42>
 80001c8:	e01d      	b.n	8000206 <RCC_voidEnableClock+0x6a>
		{
		case RCC_AHB:  SET_BIT(RCC->AHBENR,	Copy_u8PeripheralID); break;
 80001ca:	4b14      	ldr	r3, [pc, #80]	; (800021c <RCC_voidEnableClock+0x80>)
 80001cc:	695a      	ldr	r2, [r3, #20]
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	2101      	movs	r1, #1
 80001d2:	fa01 f303 	lsl.w	r3, r1, r3
 80001d6:	4911      	ldr	r1, [pc, #68]	; (800021c <RCC_voidEnableClock+0x80>)
 80001d8:	4313      	orrs	r3, r2
 80001da:	614b      	str	r3, [r1, #20]
 80001dc:	e018      	b.n	8000210 <RCC_voidEnableClock+0x74>
		case RCC_APB1: SET_BIT(RCC->APB1ENR,Copy_u8PeripheralID); break;
 80001de:	4b0f      	ldr	r3, [pc, #60]	; (800021c <RCC_voidEnableClock+0x80>)
 80001e0:	69da      	ldr	r2, [r3, #28]
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	2101      	movs	r1, #1
 80001e6:	fa01 f303 	lsl.w	r3, r1, r3
 80001ea:	490c      	ldr	r1, [pc, #48]	; (800021c <RCC_voidEnableClock+0x80>)
 80001ec:	4313      	orrs	r3, r2
 80001ee:	61cb      	str	r3, [r1, #28]
 80001f0:	e00e      	b.n	8000210 <RCC_voidEnableClock+0x74>
		case RCC_APB2: SET_BIT(RCC->APB2ENR,Copy_u8PeripheralID); break;
 80001f2:	4b0a      	ldr	r3, [pc, #40]	; (800021c <RCC_voidEnableClock+0x80>)
 80001f4:	699a      	ldr	r2, [r3, #24]
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2101      	movs	r1, #1
 80001fa:	fa01 f303 	lsl.w	r3, r1, r3
 80001fe:	4907      	ldr	r1, [pc, #28]	; (800021c <RCC_voidEnableClock+0x80>)
 8000200:	4313      	orrs	r3, r2
 8000202:	618b      	str	r3, [r1, #24]
 8000204:	e004      	b.n	8000210 <RCC_voidEnableClock+0x74>
		default: 	   Local_u8ErrorState = NOK; break;
 8000206:	2302      	movs	r3, #2
 8000208:	73fb      	strb	r3, [r7, #15]
 800020a:	e001      	b.n	8000210 <RCC_voidEnableClock+0x74>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 800020c:	2302      	movs	r3, #2
 800020e:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 8000210:	7bfb      	ldrb	r3, [r7, #15]
}
 8000212:	4618      	mov	r0, r3
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	40021000 	.word	0x40021000

08000220 <PORT_voidInit>:
 * Type        : Synchronous & Non Reentrant                                *
 *                                                                          *
 * description : Initiate all Pins of the Microcontroller                   *
 ****************************************************************************/
void PORT_voidInit( void )
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
	/* --> set the mode for all ports */

	/* port A */
	GPIOA->CRL = PORTA_LOW_MODE;
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <PORT_voidInit+0x40>)
 8000226:	4a0f      	ldr	r2, [pc, #60]	; (8000264 <PORT_voidInit+0x44>)
 8000228:	601a      	str	r2, [r3, #0]
	GPIOA->CRH = PORTA_HIGH_MODE;
 800022a:	4b0d      	ldr	r3, [pc, #52]	; (8000260 <PORT_voidInit+0x40>)
 800022c:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 8000230:	605a      	str	r2, [r3, #4]

	/* port B */
	GPIOB->CRL = PORTB_LOW_MODE;
 8000232:	4b0d      	ldr	r3, [pc, #52]	; (8000268 <PORT_voidInit+0x48>)
 8000234:	4a0d      	ldr	r2, [pc, #52]	; (800026c <PORT_voidInit+0x4c>)
 8000236:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = PORTB_HIGH_MODE;
 8000238:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <PORT_voidInit+0x48>)
 800023a:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 800023e:	605a      	str	r2, [r3, #4]

	/* port C */
	GPIOC->CRH = PORTC_HIGH_MODE;
 8000240:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <PORT_voidInit+0x50>)
 8000242:	4a0c      	ldr	r2, [pc, #48]	; (8000274 <PORT_voidInit+0x54>)
 8000244:	605a      	str	r2, [r3, #4]

	/* --> set initial value for all ports */

	/* port A */
	GPIOA->ODR = PORTA_INITIAL_VALUE;
 8000246:	4b06      	ldr	r3, [pc, #24]	; (8000260 <PORT_voidInit+0x40>)
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]

	/* port B */
	GPIOB->ODR = PORTB_INITIAL_VALUE;
 800024c:	4b06      	ldr	r3, [pc, #24]	; (8000268 <PORT_voidInit+0x48>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]

	/* port C */
	GPIOC->ODR = PORTC_INITIAL_VALUE;
 8000252:	4b07      	ldr	r3, [pc, #28]	; (8000270 <PORT_voidInit+0x50>)
 8000254:	2200      	movs	r2, #0
 8000256:	60da      	str	r2, [r3, #12]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	40010800 	.word	0x40010800
 8000264:	b4bb4443 	.word	0xb4bb4443
 8000268:	40010c00 	.word	0x40010c00
 800026c:	ee444444 	.word	0xee444444
 8000270:	40011000 	.word	0x40011000
 8000274:	44144444 	.word	0x44144444

08000278 <MSTK_voidStopInterval>:
	SET_BIT(MSTK->MSTK_CTRL,MSTK_ENABLE);
	MSTK_u8ModeOfinterval=MSTK_PERIODIC_INTERVAL;
}

void MSTK_voidStopInterval(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
	/*Disable the STK peripheral*/
	CLR_BIT(MSTK->MSTK_CTRL,MSTK_ENABLE);
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <MSTK_voidStopInterval+0x24>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a06      	ldr	r2, [pc, #24]	; (800029c <MSTK_voidStopInterval+0x24>)
 8000282:	f023 0301 	bic.w	r3, r3, #1
 8000286:	6013      	str	r3, [r2, #0]
	/*Clearing load Register*/
	MSTK->MSTK_LOAD=0x00;
 8000288:	4b04      	ldr	r3, [pc, #16]	; (800029c <MSTK_voidStopInterval+0x24>)
 800028a:	2200      	movs	r2, #0
 800028c:	605a      	str	r2, [r3, #4]
	/*Clearing value Register*/
	MSTK->MSTK_VAL=0x00;
 800028e:	4b03      	ldr	r3, [pc, #12]	; (800029c <MSTK_voidStopInterval+0x24>)
 8000290:	2200      	movs	r2, #0
 8000292:	609a      	str	r2, [r3, #8]
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr
 800029c:	e000e010 	.word	0xe000e010

080002a0 <SysTick_Handler>:
		Global_voidPtrCallbackFunc=Copy_ptrFunc;
	}
	return Local_u8ErrorStatus;
}
void SysTick_Handler(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	if(Global_voidPtrCallbackFunc!=NULL)
 80002a4:	4b0a      	ldr	r3, [pc, #40]	; (80002d0 <SysTick_Handler+0x30>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d00e      	beq.n	80002ca <SysTick_Handler+0x2a>
	{
		if(MSTK_u8ModeOfinterval==MSTK_SINGLE_INTERVAL)
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <SysTick_Handler+0x34>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d107      	bne.n	80002c4 <SysTick_Handler+0x24>
		{
			/*Clear load and value registers*/
			MSTK_voidStopInterval();
 80002b4:	f7ff ffe0 	bl	8000278 <MSTK_voidStopInterval>
			/*Disable the interrupt*/
			CLR_BIT(MSTK->MSTK_CTRL,MSTK_TICKINT_EN);
 80002b8:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <SysTick_Handler+0x38>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a06      	ldr	r2, [pc, #24]	; (80002d8 <SysTick_Handler+0x38>)
 80002be:	f023 0302 	bic.w	r3, r3, #2
 80002c2:	6013      	str	r3, [r2, #0]
		}
		Global_voidPtrCallbackFunc();
 80002c4:	4b02      	ldr	r3, [pc, #8]	; (80002d0 <SysTick_Handler+0x30>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4798      	blx	r3
	}
}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	2000001c 	.word	0x2000001c
 80002d4:	20000020 	.word	0x20000020
 80002d8:	e000e010 	.word	0xe000e010

080002dc <EXTI0_IRQHandler>:

	return Local_u8ErrorState;
}

void EXTI0_IRQHandler(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE0] != NULL)
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <EXTI0_IRQHandler+0x24>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d008      	beq.n	80002fa <EXTI0_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE0]();
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <EXTI0_IRQHandler+0x24>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE0);
 80002ee:	4b05      	ldr	r3, [pc, #20]	; (8000304 <EXTI0_IRQHandler+0x28>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a04      	ldr	r2, [pc, #16]	; (8000304 <EXTI0_IRQHandler+0x28>)
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	20000024 	.word	0x20000024
 8000304:	40010400 	.word	0x40010400

08000308 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE1] != NULL)
 800030c:	4b07      	ldr	r3, [pc, #28]	; (800032c <EXTI1_IRQHandler+0x24>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d008      	beq.n	8000326 <EXTI1_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE1]();
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <EXTI1_IRQHandler+0x24>)
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE1);
 800031a:	4b05      	ldr	r3, [pc, #20]	; (8000330 <EXTI1_IRQHandler+0x28>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	4a04      	ldr	r2, [pc, #16]	; (8000330 <EXTI1_IRQHandler+0x28>)
 8000320:	f043 0302 	orr.w	r3, r3, #2
 8000324:	6153      	str	r3, [r2, #20]
	else
	{
		/*Do Nothing*/
	}

}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000024 	.word	0x20000024
 8000330:	40010400 	.word	0x40010400

08000334 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE2] != NULL)
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <EXTI2_IRQHandler+0x24>)
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d008      	beq.n	8000352 <EXTI2_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE2]();
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <EXTI2_IRQHandler+0x24>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE2);
 8000346:	4b05      	ldr	r3, [pc, #20]	; (800035c <EXTI2_IRQHandler+0x28>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a04      	ldr	r2, [pc, #16]	; (800035c <EXTI2_IRQHandler+0x28>)
 800034c:	f043 0304 	orr.w	r3, r3, #4
 8000350:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000024 	.word	0x20000024
 800035c:	40010400 	.word	0x40010400

08000360 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE3] != NULL)
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <EXTI3_IRQHandler+0x24>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d008      	beq.n	800037e <EXTI3_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE3]();
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <EXTI3_IRQHandler+0x24>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE3);
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI3_IRQHandler+0x28>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI3_IRQHandler+0x28>)
 8000378:	f043 0308 	orr.w	r3, r3, #8
 800037c:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000024 	.word	0x20000024
 8000388:	40010400 	.word	0x40010400

0800038c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE4] != NULL)
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <EXTI4_IRQHandler+0x24>)
 8000392:	691b      	ldr	r3, [r3, #16]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d008      	beq.n	80003aa <EXTI4_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE4]();
 8000398:	4b05      	ldr	r3, [pc, #20]	; (80003b0 <EXTI4_IRQHandler+0x24>)
 800039a:	691b      	ldr	r3, [r3, #16]
 800039c:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE4);
 800039e:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <EXTI4_IRQHandler+0x28>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <EXTI4_IRQHandler+0x28>)
 80003a4:	f043 0310 	orr.w	r3, r3, #16
 80003a8:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000024 	.word	0x20000024
 80003b4:	40010400 	.word	0x40010400

080003b8 <TIM2_IRQHandler>:
	return Local_u8ErrorStatus;
}

/*Timer 2 ISR Handler*/
void TIM2_IRQHandler(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	if(Global_voidTIM2PtrCallbackFunc!=NULL)
 80003bc:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <TIM2_IRQHandler+0x30>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d00e      	beq.n	80003e2 <TIM2_IRQHandler+0x2a>
	{
		/*Check if the coming interrupt from the underflow or overflow or not*/
		if(Global_u8FlagTIM2==ENABLED)
 80003c4:	4b09      	ldr	r3, [pc, #36]	; (80003ec <TIM2_IRQHandler+0x34>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d102      	bne.n	80003d2 <TIM2_IRQHandler+0x1a>
		{
			Global_voidTIM2PtrCallbackFunc();
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <TIM2_IRQHandler+0x30>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4798      	blx	r3
		}
		/*Clear the update interrupt flag to be raised in the next interrupt*/
		CLR_BIT(TIM2->SR,TIM_SR_UIF);
 80003d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d6:	691b      	ldr	r3, [r3, #16]
 80003d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003dc:	f023 0301 	bic.w	r3, r3, #1
 80003e0:	6113      	str	r3, [r2, #16]
	}
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000064 	.word	0x20000064
 80003ec:	20000070 	.word	0x20000070

080003f0 <TIM3_IRQHandler>:


/*Timer 3 ISR Handler*/
void TIM3_IRQHandler(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	if(Global_voidTIM3PtrCallbackFunc!=NULL)
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <TIM3_IRQHandler+0x2c>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d00c      	beq.n	8000416 <TIM3_IRQHandler+0x26>
	{
		/*Check if the coming interrupt from the underflow or overflow or not*/
		if(Global_u8FlagTIM3==ENABLED)
 80003fc:	4b08      	ldr	r3, [pc, #32]	; (8000420 <TIM3_IRQHandler+0x30>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d102      	bne.n	800040a <TIM3_IRQHandler+0x1a>
		{
			Global_voidTIM3PtrCallbackFunc();
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <TIM3_IRQHandler+0x2c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4798      	blx	r3
		}
		/*Clear the update interrupt flag to be raised in the next interrupt*/
		CLR_BIT(TIM3->SR,TIM_SR_UIF);
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <TIM3_IRQHandler+0x34>)
 800040c:	691b      	ldr	r3, [r3, #16]
 800040e:	4a05      	ldr	r2, [pc, #20]	; (8000424 <TIM3_IRQHandler+0x34>)
 8000410:	f023 0301 	bic.w	r3, r3, #1
 8000414:	6113      	str	r3, [r2, #16]
	}
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	20000068 	.word	0x20000068
 8000420:	20000071 	.word	0x20000071
 8000424:	40000400 	.word	0x40000400

08000428 <TIM4_IRQHandler>:

/*Timer 4 ISR Handler*/
void TIM4_IRQHandler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	if(Global_voidTIM4PtrCallbackFunc!=NULL)
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <TIM4_IRQHandler+0x2c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d00c      	beq.n	800044e <TIM4_IRQHandler+0x26>
	{
		/*Check if the coming interrupt from the underflow or overflow or not*/
		if(Global_u8FlagTIM4==ENABLED)
 8000434:	4b08      	ldr	r3, [pc, #32]	; (8000458 <TIM4_IRQHandler+0x30>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d102      	bne.n	8000442 <TIM4_IRQHandler+0x1a>
		{
			Global_voidTIM4PtrCallbackFunc();
 800043c:	4b05      	ldr	r3, [pc, #20]	; (8000454 <TIM4_IRQHandler+0x2c>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4798      	blx	r3
		}
		/*Clear the update interrupt flag to be raised in the next interrupt*/
		CLR_BIT(TIM4->SR,TIM_SR_UIF);
 8000442:	4b06      	ldr	r3, [pc, #24]	; (800045c <TIM4_IRQHandler+0x34>)
 8000444:	691b      	ldr	r3, [r3, #16]
 8000446:	4a05      	ldr	r2, [pc, #20]	; (800045c <TIM4_IRQHandler+0x34>)
 8000448:	f023 0301 	bic.w	r3, r3, #1
 800044c:	6113      	str	r3, [r2, #16]
	}

}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	2000006c 	.word	0x2000006c
 8000458:	20000072 	.word	0x20000072
 800045c:	40000800 	.word	0x40000800

08000460 <SPI_Init>:
		SPI2_BASE_ADDRESS
};


SPI_Errors_t SPI_Init ( SPI_t* Ptr_SPI )
{
 8000460:	b480      	push	{r7}
 8000462:	b085      	sub	sp, #20
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	SPI_Errors_t Local_Error = SPI_NoError;
 8000468:	2300      	movs	r3, #0
 800046a:	73fb      	strb	r3, [r7, #15]

	SPI_Number_t Local_SPINumber = Ptr_SPI->SPI_Number;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	73bb      	strb	r3, [r7, #14]


	/**********************/
	/* clear CR2 register */
	/**********************/
	SPI[ Local_SPINumber ]->CR2 = 0;
 8000472:	7bbb      	ldrb	r3, [r7, #14]
 8000474:	4a65      	ldr	r2, [pc, #404]	; (800060c <SPI_Init+0x1ac>)
 8000476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800047a:	2200      	movs	r2, #0
 800047c:	605a      	str	r2, [r3, #4]


	if ( Local_SPINumber < SPI_COUNT )
 800047e:	7bbb      	ldrb	r3, [r7, #14]
 8000480:	2b01      	cmp	r3, #1
 8000482:	f200 80ba 	bhi.w	80005fa <SPI_Init+0x19a>
	{
		/*******************/
		/* set clock phase */
		/*******************/
		if ( Ptr_SPI->SPI_Phase <= SPI_ClkPhase_TrailingEdge )
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	789b      	ldrb	r3, [r3, #2]
 800048a:	2b01      	cmp	r3, #1
 800048c:	d80e      	bhi.n	80004ac <SPI_Init+0x4c>
		{
			SPI[ Local_SPINumber ]->CR1 |= ( Ptr_SPI->SPI_Phase << SPI_CR1_CPHA );
 800048e:	7bbb      	ldrb	r3, [r7, #14]
 8000490:	4a5e      	ldr	r2, [pc, #376]	; (800060c <SPI_Init+0x1ac>)
 8000492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	789b      	ldrb	r3, [r3, #2]
 800049c:	4618      	mov	r0, r3
 800049e:	7bbb      	ldrb	r3, [r7, #14]
 80004a0:	495a      	ldr	r1, [pc, #360]	; (800060c <SPI_Init+0x1ac>)
 80004a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004a6:	4302      	orrs	r2, r0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	e001      	b.n	80004b0 <SPI_Init+0x50>
		}
		else
		{
			Local_Error = SPI_ClkPhaseError;
 80004ac:	2302      	movs	r3, #2
 80004ae:	73fb      	strb	r3, [r7, #15]


		/**********************/
		/* set clock polarity */
		/**********************/
		if ( Ptr_SPI->SPI_Polartity <= SPI_ClkPol_IdleHigh )
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	78db      	ldrb	r3, [r3, #3]
 80004b4:	2b01      	cmp	r3, #1
 80004b6:	d80f      	bhi.n	80004d8 <SPI_Init+0x78>
		{
			SPI[ Local_SPINumber ]->CR1 |= ( Ptr_SPI->SPI_Polartity << SPI_CR1_CPOL );
 80004b8:	7bbb      	ldrb	r3, [r7, #14]
 80004ba:	4a54      	ldr	r2, [pc, #336]	; (800060c <SPI_Init+0x1ac>)
 80004bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	78db      	ldrb	r3, [r3, #3]
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	4618      	mov	r0, r3
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	494f      	ldr	r1, [pc, #316]	; (800060c <SPI_Init+0x1ac>)
 80004ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004d2:	4302      	orrs	r2, r0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	e001      	b.n	80004dc <SPI_Init+0x7c>
		}
		else
		{
			Local_Error = SPI_ClkPolarityError;
 80004d8:	2303      	movs	r3, #3
 80004da:	73fb      	strb	r3, [r7, #15]


		/************/
		/* set mode */
		/************/
		if ( Ptr_SPI->SPI_Mode == SPI_Master )
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	785b      	ldrb	r3, [r3, #1]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d10c      	bne.n	80004fe <SPI_Init+0x9e>
		{
			SET_BIT( SPI[ Local_SPINumber ]->CR1, SPI_CR1_MSTR );
 80004e4:	7bbb      	ldrb	r3, [r7, #14]
 80004e6:	4a49      	ldr	r2, [pc, #292]	; (800060c <SPI_Init+0x1ac>)
 80004e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	7bbb      	ldrb	r3, [r7, #14]
 80004f0:	4946      	ldr	r1, [pc, #280]	; (800060c <SPI_Init+0x1ac>)
 80004f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004f6:	f042 0204 	orr.w	r2, r2, #4
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	e012      	b.n	8000524 <SPI_Init+0xc4>
		}
		else if ( Ptr_SPI->SPI_Mode == SPI_Slave )
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	785b      	ldrb	r3, [r3, #1]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d10c      	bne.n	8000520 <SPI_Init+0xc0>
		{
			CLR_BIT( SPI[ Local_SPINumber ]->CR1, SPI_CR1_MSTR );
 8000506:	7bbb      	ldrb	r3, [r7, #14]
 8000508:	4a40      	ldr	r2, [pc, #256]	; (800060c <SPI_Init+0x1ac>)
 800050a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	7bbb      	ldrb	r3, [r7, #14]
 8000512:	493e      	ldr	r1, [pc, #248]	; (800060c <SPI_Init+0x1ac>)
 8000514:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000518:	f022 0204 	bic.w	r2, r2, #4
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	e001      	b.n	8000524 <SPI_Init+0xc4>
		}
		else
		{
			Local_Error = SPI_ModeError;
 8000520:	2306      	movs	r3, #6
 8000522:	73fb      	strb	r3, [r7, #15]


		/***************************/
		/* set hardware management */
		/***************************/
		SPI[ Local_SPINumber ]->CR1 |= ( SPI_SW_SLAVE_SELECT << SPI_CR1_SSI );
 8000524:	7bbb      	ldrb	r3, [r7, #14]
 8000526:	4a39      	ldr	r2, [pc, #228]	; (800060c <SPI_Init+0x1ac>)
 8000528:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800052c:	7bbb      	ldrb	r3, [r7, #14]
 800052e:	4937      	ldr	r1, [pc, #220]	; (800060c <SPI_Init+0x1ac>)
 8000530:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000534:	6812      	ldr	r2, [r2, #0]
 8000536:	601a      	str	r2, [r3, #0]


		/*********************/
		/* set the baud rate */
		/*********************/
		if ( Ptr_SPI->SPI_Mode == SPI_Master )
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	785b      	ldrb	r3, [r3, #1]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d12d      	bne.n	800059c <SPI_Init+0x13c>
		{
			if ( Ptr_SPI->SPI_ClkRate <= SPI_ClkRateDiv256 )
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	791b      	ldrb	r3, [r3, #4]
 8000544:	2b07      	cmp	r3, #7
 8000546:	d827      	bhi.n	8000598 <SPI_Init+0x138>
			{
				SPI[ Local_SPINumber ]->CR1 &= ~( SPI_CLK_MASK << SPI_CR1_BR );
 8000548:	7bbb      	ldrb	r3, [r7, #14]
 800054a:	4a30      	ldr	r2, [pc, #192]	; (800060c <SPI_Init+0x1ac>)
 800054c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	7bbb      	ldrb	r3, [r7, #14]
 8000554:	492d      	ldr	r1, [pc, #180]	; (800060c <SPI_Init+0x1ac>)
 8000556:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800055a:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800055e:	601a      	str	r2, [r3, #0]
				SPI[ Local_SPINumber ]->CR1 |= ( Ptr_SPI->SPI_ClkRate << SPI_CR1_BR );
 8000560:	7bbb      	ldrb	r3, [r7, #14]
 8000562:	4a2a      	ldr	r2, [pc, #168]	; (800060c <SPI_Init+0x1ac>)
 8000564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	4618      	mov	r0, r3
 8000572:	7bbb      	ldrb	r3, [r7, #14]
 8000574:	4925      	ldr	r1, [pc, #148]	; (800060c <SPI_Init+0x1ac>)
 8000576:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800057a:	4302      	orrs	r2, r0
 800057c:	601a      	str	r2, [r3, #0]

				/*********************/
				/* enable NSS output */
				/*********************/
				SET_BIT( SPI[ Local_SPINumber ]->CR2, SPI_CR2_SSOE );
 800057e:	7bbb      	ldrb	r3, [r7, #14]
 8000580:	4a22      	ldr	r2, [pc, #136]	; (800060c <SPI_Init+0x1ac>)
 8000582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000586:	685a      	ldr	r2, [r3, #4]
 8000588:	7bbb      	ldrb	r3, [r7, #14]
 800058a:	4920      	ldr	r1, [pc, #128]	; (800060c <SPI_Init+0x1ac>)
 800058c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000590:	f042 0204 	orr.w	r2, r2, #4
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	e001      	b.n	800059c <SPI_Init+0x13c>
			}
			else
			{
				Local_Error = SPI_ClkRateError;
 8000598:	2304      	movs	r3, #4
 800059a:	73fb      	strb	r3, [r7, #15]


		/******************/
		/* set data order */
		/******************/
		if ( Ptr_SPI->SPI_DataOrder <= SPI_LSBFirst )
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	795b      	ldrb	r3, [r3, #5]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d80f      	bhi.n	80005c4 <SPI_Init+0x164>
		{
			SPI[ Local_SPINumber ]->CR1 |= ( Ptr_SPI->SPI_DataOrder << SPI_CR1_LSBFIRST );
 80005a4:	7bbb      	ldrb	r3, [r7, #14]
 80005a6:	4a19      	ldr	r2, [pc, #100]	; (800060c <SPI_Init+0x1ac>)
 80005a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	795b      	ldrb	r3, [r3, #5]
 80005b2:	01db      	lsls	r3, r3, #7
 80005b4:	4618      	mov	r0, r3
 80005b6:	7bbb      	ldrb	r3, [r7, #14]
 80005b8:	4914      	ldr	r1, [pc, #80]	; (800060c <SPI_Init+0x1ac>)
 80005ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005be:	4302      	orrs	r2, r0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	e001      	b.n	80005c8 <SPI_Init+0x168>
		}
		else
		{
			Local_Error = SPI_DataOrderError;
 80005c4:	2305      	movs	r3, #5
 80005c6:	73fb      	strb	r3, [r7, #15]


		/****************************/
		/* set data frame to 8 bits */
		/****************************/
		CLR_BIT( SPI[ Local_SPINumber ]->CR1, SPI_CR1_DFF );
 80005c8:	7bbb      	ldrb	r3, [r7, #14]
 80005ca:	4a10      	ldr	r2, [pc, #64]	; (800060c <SPI_Init+0x1ac>)
 80005cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	7bbb      	ldrb	r3, [r7, #14]
 80005d4:	490d      	ldr	r1, [pc, #52]	; (800060c <SPI_Init+0x1ac>)
 80005d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80005de:	601a      	str	r2, [r3, #0]


		/***************************/
		/* set mode to full-duplex */
		/***************************/
		CLR_BIT( SPI[ Local_SPINumber ]->CR1, SPI_CR1_RXONLY );
 80005e0:	7bbb      	ldrb	r3, [r7, #14]
 80005e2:	4a0a      	ldr	r2, [pc, #40]	; (800060c <SPI_Init+0x1ac>)
 80005e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	7bbb      	ldrb	r3, [r7, #14]
 80005ec:	4907      	ldr	r1, [pc, #28]	; (800060c <SPI_Init+0x1ac>)
 80005ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	e001      	b.n	80005fe <SPI_Init+0x19e>
	}
	else
	{
		Local_Error = SPI_PointerError;
 80005fa:	2301      	movs	r3, #1
 80005fc:	73fb      	strb	r3, [r7, #15]


	/**************************/
	/* return the error state */
	/**************************/
	return Local_Error;
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	08000860 	.word	0x08000860

08000610 <SPI_u8SynchTransceive>:




SPI_Errors_t SPI_u8SynchTransceive( SPI_Number_t Copy_SPI, u8* Ptr_u8DataSend, u8* Ptr_u8DataReceived, u32 Copy_u32Size )
{
 8000610:	b480      	push	{r7}
 8000612:	b087      	sub	sp, #28
 8000614:	af00      	add	r7, sp, #0
 8000616:	60b9      	str	r1, [r7, #8]
 8000618:	607a      	str	r2, [r7, #4]
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	4603      	mov	r3, r0
 800061e:	73fb      	strb	r3, [r7, #15]
	u32 Local_u32Iterator = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]

	SPI_Errors_t Local_Error = SPI_NoError;
 8000624:	2300      	movs	r3, #0
 8000626:	74fb      	strb	r3, [r7, #19]

	if ( Copy_SPI < SPI_COUNT )
 8000628:	7bfb      	ldrb	r3, [r7, #15]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d833      	bhi.n	8000696 <SPI_u8SynchTransceive+0x86>
	{
		while ( ( Copy_u32Size-- ) != 0 )
 800062e:	e02c      	b.n	800068a <SPI_u8SynchTransceive+0x7a>
		{
			/***************************************/
			/* put the data into the data register */
			/***************************************/
			SPI[ Copy_SPI ]->DR = Ptr_u8DataSend[ Local_u32Iterator ];
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	4413      	add	r3, r2
 8000636:	7819      	ldrb	r1, [r3, #0]
 8000638:	7bfb      	ldrb	r3, [r7, #15]
 800063a:	4a1b      	ldr	r2, [pc, #108]	; (80006a8 <SPI_u8SynchTransceive+0x98>)
 800063c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000640:	460a      	mov	r2, r1
 8000642:	60da      	str	r2, [r3, #12]


			/*****************************************************/
			/* wait until transmission and reception is complete */
			/*****************************************************/
			while ( !GET_BIT( SPI[ Copy_SPI ]->SR, SPI_SR_TXE ) );
 8000644:	bf00      	nop
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	4a17      	ldr	r2, [pc, #92]	; (80006a8 <SPI_u8SynchTransceive+0x98>)
 800064a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800064e:	689b      	ldr	r3, [r3, #8]
 8000650:	085b      	lsrs	r3, r3, #1
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	2b00      	cmp	r3, #0
 8000658:	d0f5      	beq.n	8000646 <SPI_u8SynchTransceive+0x36>
			while (  GET_BIT( SPI[ Copy_SPI ]->SR, SPI_SR_BSY ) );
 800065a:	bf00      	nop
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <SPI_u8SynchTransceive+0x98>)
 8000660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	09db      	lsrs	r3, r3, #7
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	2b00      	cmp	r3, #0
 800066e:	d1f5      	bne.n	800065c <SPI_u8SynchTransceive+0x4c>


			/*****************************************/
			/* put the received data to the variable */
			/*****************************************/
			Ptr_u8DataReceived[ Local_u32Iterator ] = SPI[ Copy_SPI ]->DR;
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	4a0d      	ldr	r2, [pc, #52]	; (80006a8 <SPI_u8SynchTransceive+0x98>)
 8000674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000678:	68d9      	ldr	r1, [r3, #12]
 800067a:	687a      	ldr	r2, [r7, #4]
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	4413      	add	r3, r2
 8000680:	b2ca      	uxtb	r2, r1
 8000682:	701a      	strb	r2, [r3, #0]


			/**************************/
			/* increment the iterator */
			/**************************/
			Local_u32Iterator++;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	3301      	adds	r3, #1
 8000688:	617b      	str	r3, [r7, #20]
		while ( ( Copy_u32Size-- ) != 0 )
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	1e5a      	subs	r2, r3, #1
 800068e:	603a      	str	r2, [r7, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d1cd      	bne.n	8000630 <SPI_u8SynchTransceive+0x20>
 8000694:	e001      	b.n	800069a <SPI_u8SynchTransceive+0x8a>
		}
	}
	else
	{
		Local_Error = SPI_PointerError;
 8000696:	2301      	movs	r3, #1
 8000698:	74fb      	strb	r3, [r7, #19]


	/**************************/
	/* return the local error */
	/**************************/
	return Local_Error;
 800069a:	7cfb      	ldrb	r3, [r7, #19]
}
 800069c:	4618      	mov	r0, r3
 800069e:	371c      	adds	r7, #28
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	08000860 	.word	0x08000860

080006ac <SPI_State>:


SPI_Errors_t SPI_State ( SPI_Number_t Copy_SPI, SPI_State_t Copy_u8Status )
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	460a      	mov	r2, r1
 80006b6:	71fb      	strb	r3, [r7, #7]
 80006b8:	4613      	mov	r3, r2
 80006ba:	71bb      	strb	r3, [r7, #6]
	SPI_Errors_t Local_Error = SPI_NoError;
 80006bc:	2300      	movs	r3, #0
 80006be:	73fb      	strb	r3, [r7, #15]

	if ( Copy_SPI < SPI_COUNT )
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d822      	bhi.n	800070c <SPI_State+0x60>
	{
		if ( Copy_u8Status == SPI_Enable )
 80006c6:	79bb      	ldrb	r3, [r7, #6]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10c      	bne.n	80006e6 <SPI_State+0x3a>
		{
			/*************************/
			/* enable SPI peripheral */
			/*************************/
			SET_BIT( SPI[ Copy_SPI ]->CR1, SPI_CR1_SPE );
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4a13      	ldr	r2, [pc, #76]	; (800071c <SPI_State+0x70>)
 80006d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	4910      	ldr	r1, [pc, #64]	; (800071c <SPI_State+0x70>)
 80006da:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	e014      	b.n	8000710 <SPI_State+0x64>
		}
		else if ( Copy_u8Status == SPI_Disable )
 80006e6:	79bb      	ldrb	r3, [r7, #6]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d10c      	bne.n	8000706 <SPI_State+0x5a>
		{
			/**************************/
			/* disable SPI peripheral */
			/**************************/
			CLR_BIT( SPI[ Copy_SPI ]->CR1, SPI_CR1_SPE );
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	4a0b      	ldr	r2, [pc, #44]	; (800071c <SPI_State+0x70>)
 80006f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4908      	ldr	r1, [pc, #32]	; (800071c <SPI_State+0x70>)
 80006fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	e004      	b.n	8000710 <SPI_State+0x64>
		}
		else
		{
			Local_Error = SPI_StateError;
 8000706:	2307      	movs	r3, #7
 8000708:	73fb      	strb	r3, [r7, #15]
 800070a:	e001      	b.n	8000710 <SPI_State+0x64>
		}

	}
	else
	{
		Local_Error = SPI_PointerError;
 800070c:	2301      	movs	r3, #1
 800070e:	73fb      	strb	r3, [r7, #15]


	/**************************/
	/* return the local error */
	/**************************/
	return Local_Error;
 8000710:	7bfb      	ldrb	r3, [r7, #15]
}
 8000712:	4618      	mov	r0, r3
 8000714:	3714      	adds	r7, #20
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	08000860 	.word	0x08000860

08000720 <main>:

#define Spi_data_counter   4


int main ( void )
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
	SPI_t spi =
 8000726:	4a1d      	ldr	r2, [pc, #116]	; (800079c <main+0x7c>)
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000730:	6018      	str	r0, [r3, #0]
 8000732:	3304      	adds	r3, #4
 8000734:	8019      	strh	r1, [r3, #0]
			.SPI_Polartity = SPI_ClkPol_IdleLow,
			.SPI_ClkRate   = SPI_ClkRateDiv2,
			.SPI_DataOrder = SPI_LSBFirst,
	};

	RCC_voidInitSysClock();
 8000736:	f7ff fd1b 	bl	8000170 <RCC_voidInitSysClock>
	RCC_voidEnableClock( RCC_GPIOA, RCC_APB2 );
 800073a:	2102      	movs	r1, #2
 800073c:	2002      	movs	r0, #2
 800073e:	f7ff fd2d 	bl	800019c <RCC_voidEnableClock>
	RCC_voidEnableClock( RCC_GPIOB, RCC_APB2 );
 8000742:	2102      	movs	r1, #2
 8000744:	2003      	movs	r0, #3
 8000746:	f7ff fd29 	bl	800019c <RCC_voidEnableClock>
	RCC_voidEnableClock( RCC_GPIOC, RCC_APB2 );
 800074a:	2102      	movs	r1, #2
 800074c:	2004      	movs	r0, #4
 800074e:	f7ff fd25 	bl	800019c <RCC_voidEnableClock>

	RCC_voidEnableClock( RCC_I2C1, RCC_APB1 );
 8000752:	2101      	movs	r1, #1
 8000754:	2015      	movs	r0, #21
 8000756:	f7ff fd21 	bl	800019c <RCC_voidEnableClock>
	RCC_voidEnableClock( RCC_I2C2, RCC_APB1 );
 800075a:	2101      	movs	r1, #1
 800075c:	2016      	movs	r0, #22
 800075e:	f7ff fd1d 	bl	800019c <RCC_voidEnableClock>

	RCC_voidEnableClock( RCC_SPI1, RCC_APB2 );
 8000762:	2102      	movs	r1, #2
 8000764:	200c      	movs	r0, #12
 8000766:	f7ff fd19 	bl	800019c <RCC_voidEnableClock>

	PORT_voidInit();
 800076a:	f7ff fd59 	bl	8000220 <PORT_voidInit>


	u8 data[Spi_data_counter] =
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <main+0x80>)
 8000770:	607b      	str	r3, [r7, #4]
	};

	u8 a[Spi_data_counter];

//	I2C_Init( I2C1 );
	SPI_Init( &spi );
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff fe72 	bl	8000460 <SPI_Init>
//		I2C_Start( I2C1 );
//		I2C_SendAddress( I2C1, 0x4E );
//		I2C_SendData( I2C1, &(t), 1 );
//		I2C_Stop( I2C1 );

		SPI_State(SPI1, SPI_Enable);
 800077c:	2100      	movs	r1, #0
 800077e:	2000      	movs	r0, #0
 8000780:	f7ff ff94 	bl	80006ac <SPI_State>
		SPI_u8SynchTransceive( SPI1, data, a, Spi_data_counter);
 8000784:	463a      	mov	r2, r7
 8000786:	1d39      	adds	r1, r7, #4
 8000788:	2304      	movs	r3, #4
 800078a:	2000      	movs	r0, #0
 800078c:	f7ff ff40 	bl	8000610 <SPI_u8SynchTransceive>
		SPI_State(SPI1, SPI_Disable);
 8000790:	2101      	movs	r1, #1
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff ff8a 	bl	80006ac <SPI_State>
		SPI_State(SPI1, SPI_Enable);
 8000798:	e7f0      	b.n	800077c <main+0x5c>
 800079a:	bf00      	nop
 800079c:	08000858 	.word	0x08000858
 80007a0:	55cfbaab 	.word	0x55cfbaab

080007a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007a4:	480d      	ldr	r0, [pc, #52]	; (80007dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ac:	480c      	ldr	r0, [pc, #48]	; (80007e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ae:	490d      	ldr	r1, [pc, #52]	; (80007e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007b0:	4a0d      	ldr	r2, [pc, #52]	; (80007e8 <LoopForever+0xe>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007b4:	e002      	b.n	80007bc <LoopCopyDataInit>

080007b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ba:	3304      	adds	r3, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c0:	d3f9      	bcc.n	80007b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007c2:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80007c4:	4c0a      	ldr	r4, [pc, #40]	; (80007f0 <LoopForever+0x16>)
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c8:	e001      	b.n	80007ce <LoopFillZerobss>

080007ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007cc:	3204      	adds	r2, #4

080007ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d0:	d3fb      	bcc.n	80007ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007d2:	f000 f811 	bl	80007f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007d6:	f7ff ffa3 	bl	8000720 <main>

080007da <LoopForever>:

LoopForever:
    b LoopForever
 80007da:	e7fe      	b.n	80007da <LoopForever>
  ldr   r0, =_estack
 80007dc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80007e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007e8:	08000870 	.word	0x08000870
  ldr r2, =_sbss
 80007ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007f0:	20000074 	.word	0x20000074

080007f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC1_2_IRQHandler>
	...

080007f8 <__libc_init_array>:
 80007f8:	b570      	push	{r4, r5, r6, lr}
 80007fa:	2600      	movs	r6, #0
 80007fc:	4d0c      	ldr	r5, [pc, #48]	; (8000830 <__libc_init_array+0x38>)
 80007fe:	4c0d      	ldr	r4, [pc, #52]	; (8000834 <__libc_init_array+0x3c>)
 8000800:	1b64      	subs	r4, r4, r5
 8000802:	10a4      	asrs	r4, r4, #2
 8000804:	42a6      	cmp	r6, r4
 8000806:	d109      	bne.n	800081c <__libc_init_array+0x24>
 8000808:	f000 f81a 	bl	8000840 <_init>
 800080c:	2600      	movs	r6, #0
 800080e:	4d0a      	ldr	r5, [pc, #40]	; (8000838 <__libc_init_array+0x40>)
 8000810:	4c0a      	ldr	r4, [pc, #40]	; (800083c <__libc_init_array+0x44>)
 8000812:	1b64      	subs	r4, r4, r5
 8000814:	10a4      	asrs	r4, r4, #2
 8000816:	42a6      	cmp	r6, r4
 8000818:	d105      	bne.n	8000826 <__libc_init_array+0x2e>
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000820:	4798      	blx	r3
 8000822:	3601      	adds	r6, #1
 8000824:	e7ee      	b.n	8000804 <__libc_init_array+0xc>
 8000826:	f855 3b04 	ldr.w	r3, [r5], #4
 800082a:	4798      	blx	r3
 800082c:	3601      	adds	r6, #1
 800082e:	e7f2      	b.n	8000816 <__libc_init_array+0x1e>
 8000830:	08000868 	.word	0x08000868
 8000834:	08000868 	.word	0x08000868
 8000838:	08000868 	.word	0x08000868
 800083c:	0800086c 	.word	0x0800086c

08000840 <_init>:
 8000840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000842:	bf00      	nop
 8000844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000846:	bc08      	pop	{r3}
 8000848:	469e      	mov	lr, r3
 800084a:	4770      	bx	lr

0800084c <_fini>:
 800084c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084e:	bf00      	nop
 8000850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000852:	bc08      	pop	{r3}
 8000854:	469e      	mov	lr, r3
 8000856:	4770      	bx	lr
